{"version":3,"sources":["components/Register.js","token.js","components/Login.js","components/PropertyOwnershipList.js","components/AccountInfoView.js","components/MapMarkerIcon.png","components/PropertyOnMap.js","components/UserOnMapIcon.png","components/UserOnMap.js","components/Map.js","components/PropertyListVisualizer.js","components/Dashboard.js","components/Leaderboard.js","components/Homepage.js","App.js","reportWebVitals.js","index.js"],"names":["Register","nameFieldChanged","e","setState","nameField","target","value","emailFieldChanged","emailField","passwordFieldChanged","passField","onRegister","a","axios","method","url","headers","data","name","state","email","password","status","to","toString","className","this","type","placeholder","onChange","data-mdb-ripple-color","onClick","React","Component","token","val","Login","onLogin","res","PropertyOwnershipList","props","items","processed","map","hourlyIncome","level","ownerEmailT1","onSell","_id","ownerEmailT2","ownerEmailT3","ownerEmailT4","ownerEmailT5","AccountInfoView","onUpgradeMultiplier","balance","alert","error","multiplier","onUpgrade","maxProperties","onRedirectRequest","redirect","onLeaderboardRequest","redirectLeader","propertyId","tier","id","location","user","numProperties","properties","length","window","href","created","accountCreatedDate","experience","x","parseFloat","toFixed","replace","numberWithCommas","bind","PropertyOnMap","src","icon","style","width","alt","onHover","$hover","UserOnMap","Map","clickedMap","walkCost","distanceInmBetweenEarthCoordinates","userLat","userLon","lat","lng","process","REACT_APP_REVERSE_API_KEY","addy","walkLat","walkLon","address","results","formatted","find","c","hoverInfo","degreesToRadians","degrees","Math","PI","walkOffer","propertyVisuals","userBalance","moveHandler","hoverVisuals","height","marginLeft","marginRight","border","borderRadius","bootstrapURLKeys","key","language","region","center","defaultZoom","lat1","lon1","lat2","lon2","dLat","dLon","sin","cos","atan2","sqrt","PropertyListVisualizer","cost","handler","generateBuyButton","generateEntries","Dashboard","changePage","makeMove","lon","range","localProperties","propertiesToShow","makePurchase","vals","goToLeaderboard","focusHandler","prevState","sort","b","align","Leaderboard","redirectAccountView","redirectDashboard","people","p","Homepage","numPlayers","totalEarnings","numUsers","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8020c6cc.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"./register.css\";\r\n\r\n// Responsible for generating register page\r\nclass Register extends React.Component {\r\n  constructor() {\r\n    super();\r\n    // Store the form information as state\r\n    this.state = {\r\n      nameField: \"\",\r\n      passField: \"\",\r\n      emailField: \"\",\r\n      status: \"\",\r\n    };\r\n  }\r\n\r\n  // If the user name changes, update state\r\n  nameFieldChanged = (e) => {\r\n    this.setState(() => ({\r\n      nameField: e.target.value,\r\n    }));\r\n  };\r\n\r\n  // If the user email changes, update state\r\n  emailFieldChanged = (e) => {\r\n    this.setState(() => ({\r\n      emailField: e.target.value,\r\n    }));\r\n  };\r\n\r\n  // If the user password changes, update state\r\n  passwordFieldChanged = (e) => {\r\n    this.setState(() => ({\r\n      passField: e.target.value,\r\n    }));\r\n  };\r\n\r\n  // Handler when the user attempts to register\r\n  onRegister = async () => {\r\n    try {\r\n      // Defer to backend\r\n      await axios({\r\n        method: \"post\",\r\n        url: \"https://backend-426.herokuapp.com/api/users/register\",\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n        },\r\n        data: {\r\n          name: this.state.nameField,\r\n          email: this.state.emailField,\r\n          password: this.state.passField,\r\n        },\r\n      });\r\n\r\n      // If we suceed, redirect user to authentication page\r\n      this.setState(() => ({\r\n        status: <Redirect to=\"/Earth3-Frontend/login\"></Redirect>,\r\n      }));\r\n\r\n    } catch (err) {\r\n      // If we fail, show information to user\r\n      this.setState(() => ({ status: err.toString() }));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"im\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <div className=\"c3\">\r\n              {this.state.status}\r\n              {this.state.status ? <br /> : \"\"}\r\n              <form className=\"box eh\">\r\n                <h1>Register</h1>\r\n                <p className=\"text-muted\">\r\n                  {\" \"}\r\n                Please enter your Name, Email, and Password!\r\n              </p>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Name\"\r\n                  onChange={this.nameFieldChanged}\r\n                ></input>\r\n                <br />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Email\"\r\n                  onChange={this.emailFieldChanged}\r\n                ></input>\r\n                <br />\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  onChange={this.passwordFieldChanged}\r\n                ></input>\r\n                <br />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-success btn-rounded\"\r\n                  data-mdb-ripple-color=\"dark\"\r\n                  onClick={this.onRegister}\r\n                >\r\n                  Register\r\n              </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","/*\r\n * Used to store JWT token for authentication purposes \r\n */\r\n\r\nlet token = {\r\n    val: \"\",\r\n};\r\nexport {token};\r\n","import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { token } from \"../token\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"./login.css\";\r\n\r\n// Responsible for rendering the login page\r\nclass Login extends React.Component {\r\n  constructor() {\r\n    super();\r\n    \r\n    // Store the current user input, at any given moment, in state\r\n    this.state = {\r\n      passField: \"\",\r\n      emailField: \"\",\r\n      status: \"\",\r\n    };\r\n  }\r\n\r\n  // If the user changes their email, update state\r\n  emailFieldChanged = (e) => {\r\n    this.setState(() => ({\r\n      emailField: e.target.value,\r\n    }));\r\n  };\r\n\r\n  // If the user updates their password, change state\r\n  passwordFieldChanged = (e) => {\r\n    this.setState(() => ({\r\n      passField: e.target.value,\r\n    }));\r\n  };\r\n\r\n  // Handler for when the user clicks the login button\r\n  onLogin = async () => {\r\n    try {\r\n      // Call the backend \r\n      let res = await axios({\r\n        method: \"post\",\r\n        url: \"https://backend-426.herokuapp.com/api/users/login\",\r\n        headers: {\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n        },\r\n        data: {\r\n          email: this.state.emailField,\r\n          password: this.state.passField,\r\n        },\r\n      });\r\n\r\n      // Grab the token and store it in the global variable\r\n      token.val = res.data.data.token;\r\n\r\n      // Update state so we redirect to the dashboard view\r\n      this.setState(() => ({\r\n        status: <Redirect to=\"/Earth3-Frontend/dashboard\"></Redirect>,\r\n      }));\r\n    } catch (err) {\r\n      // If there was an error authenticating, show it to the user \r\n      this.setState(() => ({ status: err.toString() }));\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"im\">\r\n        <div className=\"container\">\r\n          <div className=\"row-md-5\">\r\n            <div className=\"col-md-6 \">\r\n              <div className=\"c3\">\r\n                {this.state.status}\r\n                {this.state.status ? <br /> : \"\"}\r\n                <form className=\"box\">\r\n                  <h1>Login</h1>\r\n                  <p className=\"text-muted\">\r\n                    {\" \"}\r\n                    Please enter your Email and Password!\r\n                  </p>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Email\"\r\n                    onChange={this.emailFieldChanged}\r\n                  ></input>\r\n                  <br />\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    onChange={this.passwordFieldChanged}\r\n                  ></input>\r\n                  <br />\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-success btn-rounded\"\r\n                    data-mdb-ripple-color=\"dark\"\r\n                    onClick={this.onLogin}\r\n                  >\r\n                    Login\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","// Responsible for generating the list of properties owned by the current user\r\nimport \"./propertyowner.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction PropertyOwnershipList(props) {\r\n  // If user owns no properties, stop\r\n  if (!props.items) {\r\n    return <h1>Buy Properties to Get Started...</h1>;\r\n  }\r\n\r\n  let processed = \"\";\r\n\r\n  processed = props.items.map((e) => {\r\n    return (\r\n      \r\n      <div className=\"card cpo\" key={e._id}>\r\n        <h1 className=\"ct tm\">{e.name}</h1>\r\n        <h7 className=\"ct\">Hourly Income: {e.hourlyIncome}</h7>\r\n        <h7 className=\"ct\">Base Value: {e.value}</h7>\r\n        <h7 className=\"ct\">Level:{e.level} </h7>\r\n        <h4 className=\"ct\">Owners:</h4>\r\n        <ul className=\"ct c \">\r\n\r\n          <li className=\"ct mg\">\r\n\r\n            Tier 1:  {e.ownerEmailT1 ? e.ownerEmailT1 : <em>Unowned  </em>}\r\n            {e.ownerEmailT1 === props.email ? (\r\n\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-warning btn-rounded sbtn\"\r\n                data-mdb-ripple-color=\"dark\"\r\n                onClick={() => {\r\n                  props.onSell(props.email, e._id, 1);\r\n                }}\r\n              >\r\n                Sell\r\n              </button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </li>\r\n          <li className=\"ct mg\">\r\n            Tier 2: {e.ownerEmailT2 ? e.ownerEmailT2 : <em>Unowned  </em>}\r\n            {e.ownerEmailT2 === props.email ? (\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-warning btn-rounded sbtn\"\r\n                data-mdb-ripple-color=\"dark\"\r\n                onClick={() => {\r\n                  props.onSell(props.email, e._id, 2);\r\n                }}\r\n              >\r\n                Sell\r\n              </button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </li>\r\n          <li className=\"ct mg \">\r\n            Tier 3: {e.ownerEmailT3 ? e.ownerEmailT3 : <em>Unowned</em>}\r\n            {e.ownerEmailT3 === props.email ? (\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-warning btn-rounded sbtn\"\r\n                data-mdb-ripple-color=\"dark\"\r\n                onClick={() => {\r\n                  props.onSell(props.email, e._id, 3);\r\n                }}\r\n              >\r\n                Sell\r\n              </button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </li>\r\n          <li className=\"ct mg\">\r\n            Tier 4: {e.ownerEmailT4 ? e.ownerEmailT4 : <em>Unowned  </em>}\r\n            {e.ownerEmailT4 === props.email ? (\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-warning btn-rounded sbtn\"\r\n                data-mdb-ripple-color=\"dark\"\r\n                onClick={() => {\r\n                  props.onSell(props.email, e._id, 4);\r\n                }}\r\n              >\r\n                Sell\r\n              </button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </li>\r\n          <li className=\"ct mg\">\r\n            Tier 5: {e.ownerEmailT5 ? e.ownerEmailT5 : <em>Unowned  </em>}\r\n            {e.ownerEmailT5 === props.email ? (\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-warning btn-rounded sbtn\"\r\n                data-mdb-ripple-color=\"dark\"\r\n                onClick={() => {\r\n                  props.onSell(props.email, e._id, 5);\r\n                }}\r\n              >\r\n                Sell\r\n              </button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    \r\n    );\r\n  });\r\n\r\n  return <div>{processed}</div>;\r\n}\r\n\r\nexport default PropertyOwnershipList;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { token } from \"../token\";\r\nimport axios from \"axios\";\r\nimport PropertyOwnershipList from \"./PropertyOwnershipList\";\r\nimport \"./accountinfoview.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// Response for loading the personal account information pages\r\nclass AccountInfoView extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      multiplier: 1.0,\r\n    };\r\n  }\r\n\r\n  // First time the component is rendered, fetch data\r\n  async componentDidMount() {\r\n    // Validate that the user has authenticated\r\n    if (!token.val) {\r\n      // Don't fetch, render will automatically redirect the user\r\n      return;\r\n    }\r\n\r\n    // Call backend for account information\r\n    const res = await axios({\r\n      method: \"get\",\r\n      url: \"https://backend-426.herokuapp.com/api/user/accountInformation\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n    });\r\n\r\n    // If the call fails, redirect the user\r\n    if (res.data.error) {\r\n      window.location.href = \"../login\";\r\n    }\r\n\r\n    // Set the state based on the result of the call\r\n    this.setState(() => ({\r\n      email: res.data.data.email,\r\n      name: res.data.data.name,\r\n      created: res.data.data.accountCreatedDate,\r\n      balance: res.data.data.balance,\r\n      multiplier: res.data.data.multiplier,\r\n      maxProperties: res.data.data.maxProperties,\r\n      experience: res.data.data.experience,\r\n      location: res.data.data.location,\r\n      numProperties: res.data.data.properties.length,\r\n      properties: res.data.properties,\r\n    }));\r\n  }\r\n\r\n  // Handler if the user requests to upgrade their income multiplier\r\n  onUpgradeMultiplier = async () => {\r\n    // Make sure that they have enough money\r\n    if (this.state.balance <= 1000000) {\r\n      alert(\"You don't have enough money for this transaction!\");\r\n      return;\r\n    }\r\n\r\n    // Call API for upgrading\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: \"https://backend-426.herokuapp.com/api/user/increaseMultiplier\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n    });\r\n\r\n    // Abort if error\r\n    if (res.data.error) {\r\n      alert(\"Unable to upgrade!\");\r\n      return;\r\n    }\r\n\r\n    // Update state after API Call\r\n    this.setState(() => ({\r\n      balance: res.data.data.balance,\r\n      multiplier: res.data.data.multiplier,\r\n    }));\r\n  };\r\n\r\n  // Handler for if the user requests to upgrade their property limit\r\n  onUpgrade = async () => {\r\n    // Make sure that they have enough money\r\n    if (this.state.balance <= this.state.maxProperties ** 3) {\r\n      alert(\"You don't have enough money for this transaction!\");\r\n      return;\r\n    }\r\n\r\n    // Call API for upgrading\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: \"https://backend-426.herokuapp.com/api/user/buyLevel\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n    });\r\n\r\n    // Abort if error\r\n    if (res.data.error) {\r\n      alert(\"Unable to upgrade!\");\r\n      return;\r\n    }\r\n\r\n    // Update state after API Call\r\n    this.setState(() => ({\r\n      balance: res.data.data.balance,\r\n      maxProperties: res.data.data.maxProperties,\r\n    }));\r\n  };\r\n\r\n  // Handler for if the user wants to go back to the dashboard\r\n  onRedirectRequest = () => {\r\n    // Update state so we render a <Redirect> tag\r\n    this.setState(() => ({\r\n      redirect: true,\r\n    }));\r\n  };\r\n\r\n  //Handler if the user wants to go to the leaderboard\r\n  onLeaderboardRequest = () => {\r\n    // Update state so we render a <Redirect> tag\r\n    this.setState(() => ({\r\n      redirectLeader: true,\r\n    }));\r\n  };\r\n\r\n  // Helper function for converting big integers into dollar readable format\r\n  numberWithCommas(x) {\r\n    if (!x) {\r\n      return \"$0\";\r\n    }\r\n    x = parseFloat(x.toFixed(2));\r\n    return \"$\" + x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  // Handler if the user requests to sell a property\r\n  onSell = async (email, propertyId, tier) => {\r\n    // Defer to backend\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: \"https://backend-426.herokuapp.com/api/property/sell\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n      data: {\r\n        email: email,\r\n        id: propertyId,\r\n        tier: tier,\r\n      },\r\n    });\r\n\r\n    // Update state with properties that may have changed\r\n    this.setState(() => ({\r\n      maxProperties: res.data.data.maxProperties,\r\n      location: res.data.data.user.location,\r\n      numProperties: res.data.data.user.properties.length,\r\n      properties: res.data.data.properties,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    // Validate token\r\n    if (!token.val) {\r\n      return <Redirect to=\"/Earth3-Frontend/login\"></Redirect>;\r\n    }\r\n\r\n    // If the user has requested to go back to the dashboard\r\n    if (this.state.redirect) {\r\n      return <Redirect to=\"/Earth3-Frontend/dashboard\"></Redirect>;\r\n    }\r\n\r\n    // If user wants to visit leaderboard\r\n    if (this.state.redirectLeader) {\r\n      return <Redirect to=\"/Earth3-Frontend/leaderboard\"></Redirect>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"ml back\">\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-dark btn-rounded ml mt tbuttons\"\r\n          data-mdb-ripple-color=\"dark\"\r\n          onClick={this.onRedirectRequest}>Go Back to Dashboard</button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-dark btn-rounded ml mt tbuttons\"\r\n          data-mdb-ripple-color=\"dark\"\r\n          onClick={this.onLeaderboardRequest}>Go to Leaderboard</button>\r\n        <hr />\r\n        <div>\r\n          <h1 className=\"ml\">Account Information:</h1>\r\n          <ul>\r\n            <li>\r\n              <strong>Email: </strong>\r\n              {this.state.email}\r\n            </li>\r\n            <li>\r\n              <strong>Name: </strong>\r\n              {this.state.name}\r\n            </li>\r\n            <li>\r\n              <strong>Account Created On: </strong>\r\n              {this.state.created}\r\n            </li>\r\n            <li>\r\n              <strong>Balance: </strong>\r\n              {this.numberWithCommas(this.state.balance)}\r\n            </li>\r\n            <li>\r\n              <strong>Maximum Properties: </strong>\r\n              {this.state.maxProperties}\r\n            </li>\r\n            <li>\r\n              <strong>Total Earnings: </strong>\r\n              {this.numberWithCommas(this.state.experience)}\r\n            </li>\r\n            <li>\r\n              <strong>Multiplier: </strong>\r\n              {this.state.multiplier.toFixed(2)}\r\n            </li>\r\n            <li>\r\n              <strong>Latitude: </strong>\r\n              {this.state.location ? this.state.location[0] : \"\"}\r\n            </li>\r\n            <li>\r\n              <strong>Longitude: </strong>\r\n              {this.state.location ? this.state.location[1] : \"\"}\r\n            </li>\r\n            <li>\r\n              <strong>Number of Properties: </strong>\r\n              {this.state.numProperties}\r\n            </li>\r\n          </ul>\r\n          <hr />\r\n          <h1 className=\"ml\">Upgrades</h1>\r\n          <p className=\"ml\">\r\n            You can currently own up to {this.state.maxProperties} properties and\r\n          you currently own {this.state.numProperties}. You can upgrade to{\" \"}\r\n            {2 * this.state.maxProperties} slots for{\" \"}\r\n            {this.numberWithCommas(this.state.maxProperties ** 3)}\r\n          </p>\r\n          {this.state.balance >= this.state.maxProperties ** 3 ? (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-success btn-rounded ml ms mbuttons\"\r\n              data-mdb-ripple-color=\"dark\"\r\n              onClick={this.onUpgrade}>Upgrade</button>\r\n          ) : (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-danger btn-rounded ml ms mbuttons\"\r\n              data-mdb-ripple-color=\"dark\">Not Enough funds!</button>\r\n          )}\r\n          <p className=\"ml\">\r\n            Your income multiplier is currently {this.state.multiplier.toFixed(2)}\r\n          . You can upgrade to {(this.state.multiplier + 0.01).toFixed(2)} for\r\n          $1,000,000\r\n        </p>\r\n          {this.state.balance >= 1000000 ? (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-success btn-rounded ml ms mbuttons\"\r\n              data-mdb-ripple-color=\"dark\"\r\n              onClick={this.onUpgradeMultiplier}>Upgrade</button>\r\n          ) : (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-danger btn-rounded ml ms mbuttons\"\r\n              data-mdb-ripple-color=\"dark\">Not Enough Funds!</button>\r\n          )}\r\n          <hr />\r\n        </div>\r\n        <h1 className=\"ml\">Your Properties:</h1>\r\n        <div className=\"wrapper\">\r\n\r\n          <PropertyOwnershipList\r\n            items={this.state.properties}\r\n            email={this.state.email}\r\n            onSell={this.onSell.bind(this)}\r\n          />\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AccountInfoView;\r\n","export default __webpack_public_path__ + \"static/media/MapMarkerIcon.fb4229c5.png\";","import icon from \"./MapMarkerIcon.png\";\r\n\r\n// Responsible for showing an individual property on the map\r\nlet PropertyOnMap = (props) => {\r\n  return (\r\n    <div key={props.name}>\r\n      <img\r\n        src={icon}\r\n        style={{ width: \"25px\" }}\r\n        alt={\"Property visualized on the map\"}\r\n        onClick={() => {\r\n          props.onHover(props.location);\r\n        }}\r\n      />\r\n      {props.$hover ? props.name : \"\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PropertyOnMap;\r\n","export default __webpack_public_path__ + \"static/media/UserOnMapIcon.3e0031bf.png\";","import icon from \"./UserOnMapIcon.png\";\r\n\r\n// Responsible for showing the user on the map\r\nfunction UserOnMap(props) {\r\n  return (\r\n    <div>\r\n      <img\r\n        src={icon}\r\n        style={{ width: \"30px\" }}\r\n        alt={\"User visualized on the map.\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserOnMap;\r\n","import React from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport PropertyOnMap from \"./PropertyOnMap\";\r\nimport UserOnMap from \"./UserOnMap\";\r\nimport \"./map.css\"\r\nimport axios from \"axios\";\r\n\r\n// Responsible for showing the map on the dashboard visualizing properties that are near the user\r\nclass Map extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Store state for indicating if the user wants to move elsewhere on the map\r\n    this.state = {\r\n      walkLat: this.props.userLat,\r\n      walkLon: this.props.userLon,\r\n      walkCost: 0,\r\n    };\r\n  }\r\n\r\n  // If the user clicks on the map, update state\r\n  clickedMap = async (e) => {\r\n    // Compute the cost to move to the target position\r\n    const walkCost = this.distanceInmBetweenEarthCoordinates(\r\n      this.props.userLat,\r\n      this.props.userLon,\r\n      e.lat,\r\n      e.lng\r\n    );\r\n\r\n    // Get address\r\n    const addy = await axios(`https://api.opencagedata.com/geocode/v1/json?key=${process.env.REACT_APP_REVERSE_API_KEY}&pretty=1&q=${e.lat}%2C${e.lng}`)\r\n\r\n    // Update state accordingly\r\n    this.setState(() => ({\r\n      walkLat: e.lat,\r\n      walkLon: e.lng,\r\n      walkCost: walkCost.toFixed(2),\r\n      address: addy.data.results[0].formatted,\r\n    }));\r\n  };\r\n\r\n  onHover = (e) => {\r\n    // Take the location and find the correct property\r\n    const target = this.props.properties.find((c) => {\r\n      return c.location[0] === e[0] && c.location[1] === e[1];\r\n    });\r\n\r\n    //Update state\r\n    this.setState(() => ({\r\n      hoverInfo: target,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let walkOffer;\r\n    walkOffer = (\r\n      <div>\r\n        <hr />\r\n        <strong className=\"ll\">Latitude: {this.state.walkLat}</strong>\r\n        <strong className=\"ll\">Longitude:\r\n        {this.state.walkLon}\r\n          {this.state.address ? <p>Address: {this.state.address}</p> : \"\"}\r\n        </strong>\r\n        <br />\r\n        <strong className=\"ll\">Cost: ${this.state.walkCost}</strong>\r\n        <br />\r\n        {this.props.userBalance > this.state.walkCost ? (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-success btn-rounded mbtn\"\r\n            data-mdb-ripple-color=\"dark\"\r\n            onClick={async () => {\r\n              // Only call API if they are moving to a new location\r\n              if (this.state.walkCost === 0) {\r\n                return;\r\n              }\r\n\r\n              if (\r\n                await this.props.moveHandler(\r\n                  this.state.walkLat,\r\n                  this.state.walkLon\r\n                )\r\n              ) {\r\n                // Now it costs no money to move where we are\r\n                this.setState(() => ({ walkCost: 0 }));\r\n              }\r\n            }}\r\n          >\r\n            Move\r\n          </button>\r\n        ) : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-danger btn-rounded mbtn\"\r\n            data-mdb-ripple-color=\"dark\">Insufficient Funds</button>\r\n        )}\r\n        <hr />\r\n      </div>\r\n    );\r\n\r\n    let propertyVisuals;\r\n    if (this.props.properties) {\r\n      propertyVisuals = this.props.properties.map((e) => (\r\n        <PropertyOnMap\r\n          location={e.location}\r\n          name={e.name}\r\n          lat={e.location[0]}\r\n          lng={e.location[1]}\r\n          key={e.location[0] + \"\" + e.location[1]}\r\n          onHover={this.onHover}\r\n        />\r\n      ));\r\n    }\r\n\r\n    let hoverVisuals = \"Click a property for more details\";\r\n    if (this.state.hoverInfo) {\r\n      //hoverVisuals = (<div>\r\n      //<PropertyListVisualizer items={[this.state.hoverInfo]} handler={this.props.focusHandler} />\r\n      //</div>);\r\n      hoverVisuals = (\r\n        <div className = \"locInfo\">\r\n          <h3>{this.state.hoverInfo.name}</h3>\r\n          <h5>Value: {this.state.hoverInfo.value}</h5>\r\n          <h5>Income: {this.state.hoverInfo.hourlyIncome}</h5>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {walkOffer}\r\n        {hoverVisuals}\r\n        \r\n        <div style={{ width: \"800px\", height: \"500px\", marginLeft: \"auto\", marginRight: \"auto\", border: \"15px solid #032544\", borderRadius: \"15px\" }}>\r\n          <GoogleMapReact\r\n            bootstrapURLKeys={{\r\n              key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n              language: \"en\",\r\n              region: \"US\",\r\n            }}\r\n            center={{ lat: this.props.userLat, lng: this.props.userLon }}\r\n            defaultZoom={15}\r\n            onClick={this.clickedMap}\r\n          >\r\n            {propertyVisuals}\r\n            <UserOnMap\r\n              lat={this.props.userLat}\r\n              lng={this.props.userLon}\r\n              name={\"Me\"}\r\n            />\r\n          </GoogleMapReact>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n  degreesToRadians = (degrees) => {\r\n    return (degrees * Math.PI) / 180;\r\n  };\r\n\r\n  distanceInmBetweenEarthCoordinates(lat1, lon1, lat2, lon2) {\r\n    var earthRadiusKm = 6371;\r\n\r\n    var dLat = this.degreesToRadians(lat2 - lat1);\r\n    var dLon = this.degreesToRadians(lon2 - lon1);\r\n\r\n    lat1 = this.degreesToRadians(lat1);\r\n    lat2 = this.degreesToRadians(lat2);\r\n\r\n    var a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return 1000 * earthRadiusKm * c;\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./propertylistvisualizer.css\"\r\n// Responsible for showing the user a list of nearby properties\r\nclass PropertyListVisualizer extends React.Component {\r\n  // Helper function for showing purchase buttons under each property tier\r\n  generateBuyButton(id, tier, cost) {\r\n    // Ensure that the user has sufficient funds\r\n    if (cost > this.props.balance) {\r\n      return <button\r\n      type=\"button\"\r\n      className=\"btn btn-outline-danger btn-rounded nebtn\"\r\n      data-mdb-ripple-color=\"dark\">Not enough $$$</button>;\r\n    }\r\n\r\n    return (\r\n      <button\r\n      type=\"button\"\r\n      className=\"btn btn-outline-success btn-rounded pbtn\"\r\n      data-mdb-ripple-color=\"dark\"\r\n        onClick={() => {\r\n          this.props.handler(id, tier);\r\n        }}\r\n      >\r\n        Purchase for {`${this.numberWithCommas(cost)}`}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  // Hepler for parsing numbers into a dollar readable format\r\n  numberWithCommas(x) {\r\n    if (!x) {\r\n      return \"\";\r\n    }\r\n    x = parseFloat(x.toFixed(2));\r\n    return \"$\" + x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  // Function for generating the entire list to show \r\n  generateEntries() {\r\n    // If we have no properties, or the component just loaded...\r\n    if (!this.props.items || this.props.items.length === 0) {\r\n      return (\r\n        <div>\r\n          <h1>No nearby properties found...</h1>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.items.map((e) => {\r\n      return (\r\n        <div className=\"card ct\" key={e._id}>\r\n          <h1 className=\"tm\">{e.name}</h1>\r\n          <h5>Hourly Income: {e.hourlyIncome}</h5>\r\n          <h5>Base Value: {e.value}</h5>\r\n          <h5>Level:{e.level} </h5>\r\n          <h5>Owners:</h5>\r\n          <ul className=\"c ct\">\r\n            <li>\r\n              Tier 1:{\" \"}\r\n              {e.ownerEmailT1\r\n                ? e.ownerEmailT1\r\n                : this.generateBuyButton(e._id, 1, e.value ** 1)}\r\n            </li>\r\n            <li>\r\n              Tier 2:{\" \"}\r\n              {e.ownerEmailT2\r\n                ? e.ownerEmailT2\r\n                : this.generateBuyButton(e._id, 2, e.value ** 2)}\r\n            </li>\r\n            <li>\r\n              Tier 3:{\" \"}\r\n              {e.ownerEmailT3\r\n                ? e.ownerEmailT3\r\n                : this.generateBuyButton(e._id, 3, e.value ** 3)}\r\n            </li>\r\n            <li>\r\n              Tier 4:{\" \"}\r\n              {e.ownerEmailT4\r\n                ? e.ownerEmailT4\r\n                : this.generateBuyButton(e._id, 4, e.value ** 4)}\r\n            </li>\r\n            <li>\r\n              Tier 5:{\" \"}\r\n              {e.ownerEmailT5\r\n                ? e.ownerEmailT5\r\n                : this.generateBuyButton(e._id, 5, e.value ** 5)}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n       \r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.generateEntries()}</div>;\r\n  }\r\n}\r\n\r\nexport default PropertyListVisualizer;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { token } from \"../token\";\r\nimport Map from \"./Map\";\r\nimport PropertyListVisualizer from \"./PropertyListVisualizer\";\r\nimport \"./dashboard.css\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// Responsible for rendering the dashboard shown to the user after authentication\r\nclass Dashboard extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  // When the component first loads, fetch information\r\n  async componentDidMount() {\r\n    if (!token.val) {\r\n      return;\r\n    }\r\n\r\n    // Call the backend to get user account information\r\n    const res = await axios({\r\n      method: \"get\",\r\n      url: \"https://backend-426.herokuapp.com/api/user/accountInformation\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n    });\r\n\r\n    // If the call fails, redirect user to authenticate\r\n    if (res.data.error) {\r\n      window.location.href = \"../login\";\r\n    }\r\n\r\n    // Call backend to find properties to show on the map\r\n    const localProperties = await axios({\r\n      method: \"post\",\r\n      url: \"https://backend-426.herokuapp.com/api/property/nearbyProperties\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n      data: {\r\n        lat: res.data.data.location[0],\r\n        lon: res.data.data.location[1],\r\n        range: 500,\r\n      },\r\n    });\r\n\r\n    // If the call fails, redirect user to authenticate\r\n    if (res.data.error) {\r\n      window.location.href = \"../login\";\r\n    }\r\n\r\n    // Store both results in state\r\n    this.setState(() => ({\r\n      balance: res.data.data.balance,\r\n      lat: res.data.data.location[0],\r\n      lon: res.data.data.location[1],\r\n      propertiesToShow: localProperties.data,\r\n    }));\r\n  }\r\n\r\n  // If the user requests to go to the account view page\r\n  changePage = () => {\r\n    // Update state so we render a Redirect tag\r\n    this.setState(() => ({\r\n      redirect: <Redirect to=\"/Earth3-Frontend/personal\"></Redirect>,\r\n    }));\r\n  };\r\n\r\n  // If the user requests to make a move on the map\r\n  makeMove = async (walkLat, walkLon) => {\r\n    // Immediately call backend\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: \"https://backend-426.herokuapp.com/api/user/move\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n      data: {\r\n        lat: walkLat,\r\n        lon: walkLon,\r\n      },\r\n    });\r\n\r\n    // Get the new properties that are nearby the user\r\n    const localProperties = await axios({\r\n      method: \"post\",\r\n      url: \"https://backend-426.herokuapp.com/api/property/nearbyProperties\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n      data: {\r\n        lat: walkLat,\r\n        lon: walkLon,\r\n        range: 500,\r\n      },\r\n    });\r\n\r\n    // Update state accordingly\r\n    this.setState(() => ({\r\n      balance: res.data.data.balance,\r\n      lat: res.data.data.lat,\r\n      lon: res.data.data.lon,\r\n      propertiesToShow: localProperties.data,\r\n    }));\r\n\r\n    // Inform the walk offer component that the move succeeded\r\n    return true;\r\n  };\r\n\r\n  // Handler if the user requests to buy a certain tier of a property\r\n  makePurchase = async (id, tier) => {\r\n    // Defer to backend\r\n    const res = await axios({\r\n      method: \"post\",\r\n      url: \"https://backend-426.herokuapp.com/api/property/buy\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n      data: {\r\n        propertyId: id,\r\n        tier: tier,\r\n      },\r\n    });\r\n\r\n    // Refresh property information\r\n    const localProperties = await axios({\r\n      method: \"post\",\r\n      url: \"https://backend-426.herokuapp.com/api/property/nearbyProperties\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n      data: {\r\n        lat: this.state.lat,\r\n        lon: this.state.lon,\r\n        range: 500,\r\n      },\r\n    });\r\n\r\n    // Handle results and possible error\r\n    if (res.data.error) {\r\n      this.setState(() => ({\r\n        propertiesToShow: localProperties.data,\r\n      }));\r\n    } else {\r\n      this.setState(() => ({\r\n        balance: res.data.data.user.balance,\r\n        propertiesToShow: localProperties.data,\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Helper for turning big int into dollar readable format\r\n  numberWithCommas(x) {\r\n    if (!x) {\r\n      return \"\";\r\n    }\r\n    x = parseFloat(x.toFixed(2));\r\n    return \"$\" + x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  render() {\r\n    // Validate token\r\n    if (!token.val) {\r\n      return <Redirect to=\"/Earth3-Frontend/login\"></Redirect>;\r\n    }\r\n\r\n    let vals = this.state.propertiesToShow;\r\n\r\n    return (\r\n      <div className=\"cw\">\r\n        {this.state.redirect}\r\n        {this.state.goToLeaderboard}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-dark btn-rounded ml mt tbutton\"\r\n          data-mdb-ripple-color=\"dark\"\r\n          onClick={this.changePage}>Go to Account View</button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-dark btn-rounded ml mt tbutton\"\r\n          data-mdb-ripple-color=\"dark\"\r\n          onClick={() => {\r\n            this.setState(() => ({\r\n              goToLeaderboard: (\r\n                <Redirect to=\"/Earth3-Frontend/leaderboard\"></Redirect>\r\n              ),\r\n            }));\r\n          }}\r\n        >\r\n          Go to Leaderboard\r\n        </button>\r\n        <hr />\r\n        <p className=\"cn\">\r\n          <strong className=\"ll cn\">Balance:  {this.numberWithCommas(this.state.balance)}\r\n          </strong>\r\n        </p>\r\n        <div className=\"map ct\">\r\n          <Map\r\n            userLat={this.state.lat}\r\n            userLon={this.state.lon}\r\n            properties={this.state.propertiesToShow}\r\n            userBalance={this.state.balance}\r\n            moveHandler={this.makeMove.bind(this)}\r\n            focusHandler={this.makePurchase.bind(this)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <hr />\r\n          <h3 className=\"ct\">\r\n            {this.state.propertiesToShow\r\n              ? `Showing ${this.state.propertiesToShow.length} properties`\r\n              : \"Showing no properties\"}\r\n          </h3>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-dark btn-rounded ml mt tbutton \"\r\n            data-mdb-ripple-color=\"dark\"\r\n            onClick={() => {\r\n              this.setState((prevState) => ({\r\n                propertiesToShow: prevState.propertiesToShow.sort((a, b) => {\r\n                  return a.value > b.value ? 1 : -1;\r\n                }),\r\n              }));\r\n            }}\r\n          >\r\n            Sort by Value Ascending\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-dark btn-rounded ml mt tbutton\"\r\n            data-mdb-ripple-color=\"dark\"\r\n            onClick={() => {\r\n              this.setState((prevState) => ({\r\n                propertiesToShow: prevState.propertiesToShow.sort((a, b) => {\r\n                  return a.value > b.value ? -1 : 1;\r\n                }),\r\n              }));\r\n            }}\r\n          >\r\n            Sort by Value Descending\r\n          </button>\r\n          <br />\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-dark btn-rounded ml mt tbutton\"\r\n            data-mdb-ripple-color=\"dark\"\r\n            onClick={() => {\r\n              this.setState((prevState) => ({\r\n                propertiesToShow: prevState.propertiesToShow.sort((a, b) => {\r\n                  return a.hourlyIncome > b.hourlyIncome ? 1 : -1;\r\n                }),\r\n              }));\r\n            }}\r\n          >\r\n            Sort by Income Ascending\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-dark btn-rounded ml mt tbutton\"\r\n            data-mdb-ripple-color=\"dark\"\r\n            onClick={() => {\r\n              this.setState((prevState) => ({\r\n                propertiesToShow: prevState.propertiesToShow.sort((a, b) => {\r\n                  return a.hourlyIncome > b.hourlyIncome ? -1 : 1;\r\n                }),\r\n              }));\r\n            }}\r\n          >\r\n            Sort by Income Descending\r\n          </button>\r\n          <br />\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-dark btn-rounded ml mt tbutton\"\r\n            data-mdb-ripple-color=\"dark\"\r\n            onClick={() => {\r\n              this.setState((prevState) => ({\r\n                propertiesToShow: prevState.propertiesToShow.sort((a, b) => {\r\n                  return a.level > b.level ? 1 : -1;\r\n                }),\r\n              }));\r\n            }}\r\n          >\r\n            Sort by Level Ascending\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-outline-dark btn-rounded ml mt tbutton\"\r\n            data-mdb-ripple-color=\"dark\"\r\n            onClick={() => {\r\n              this.setState((prevState) => ({\r\n                propertiesToShow: prevState.propertiesToShow.sort((a, b) => {\r\n                  return a.level > b.level ? -1 : 1;\r\n                }),\r\n              }));\r\n            }}\r\n          >\r\n            Sort by Level Descending\r\n          </button>\r\n          <div align=\"center\">\r\n            <PropertyListVisualizer\r\n              items={vals}\r\n              balance={this.state.balance}\r\n              handler={this.makePurchase.bind(this)}\r\n              key={this.state.propertiesToShow}\r\n              id={vals}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { token } from \"../token\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"./leaderboard.css\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// Responsible for showing the leaderboard of the top 10 players, ranked by lifetime earnings\r\nclass Leaderboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // State for handling redirect requests\r\n    this.state = {\r\n      redirectAccountView: false,\r\n      redirectDashboard: false,\r\n    };\r\n  }\r\n\r\n  // Helper for turning big int into dollar readable format\r\n  numberWithCommas(x) {\r\n    if (!x) {\r\n      return \"\";\r\n    }\r\n    x = parseFloat(x.toFixed(2));\r\n    return \"$\" + x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  // When the component is first loaded, get the leaderboard information\r\n  async componentDidMount() {\r\n    // Make sure we have a valid token\r\n    if (!token.val) {\r\n      return;\r\n    }\r\n\r\n    // Call the backend to get user account information\r\n    const res = await axios({\r\n      method: \"get\",\r\n      url: \"https://backend-426.herokuapp.com/api/user/leaderboard\",\r\n      headers: {\r\n        \"auth-token\": token.val,\r\n      },\r\n    });\r\n\r\n    // If there was an error, inform the user and abort\r\n    if (res.data.error) {\r\n      alert(\"Unable to access leaderboard\");\r\n      return;\r\n    }\r\n\r\n    // If we succeed, store data in state\r\n    this.setState(() => ({\r\n      people: res.data.data,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    // Handle the case where the user clicks the account view button\r\n    if (this.state.redirectAccountView) {\r\n      return <Redirect to=\"/Earth3-Frontend/personal\"></Redirect>;\r\n    }\r\n\r\n    // Handle the case where the user clicks the dashboard view button\r\n    if (this.state.redirectDashboard) {\r\n      return <Redirect to=\"/Earth3-Frontend/dashboard\"></Redirect>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"pad\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-dark btn-rounded ml mt tbuttons\"\r\n          data-mdb-ripple-color=\"dark\"\r\n          onClick={() => {\r\n            this.setState(() => ({ redirectDashboard: true }));\r\n          }}\r\n        >\r\n          Dashboard\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-outline-dark btn-rounded ml mt tbuttons\"\r\n          data-mdb-ripple-color=\"dark\"\r\n          onClick={() => {\r\n            this.setState(() => ({ redirectAccountView: true }));\r\n          }}\r\n        >\r\n          Account View\r\n        </button>\r\n        <hr />\r\n        <h1 className=\"ct\">Leaderboard</h1>\r\n        <ol className=\"list\">\r\n          {this.state.people\r\n            ? this.state.people.map((p) => {\r\n              return (\r\n                <div className='card c2 ct'>\r\n                  <li className=\"ct hc\" key={p.name + p.experience}>\r\n                    <hr className=\"hr50\" />\r\n                    <h3 className=\"hc\">{p.name}</h3>\r\n                    <br />\r\n                    <strong>Properties Owned:</strong> {p.numProperties}\r\n                    <br />\r\n                    <strong>Lifetime Earnings:</strong>{\" \"}\r\n                    {this.numberWithCommas(p.experience)}\r\n                  </li>\r\n                </div>\r\n              );\r\n            })\r\n            : \"Loading...\"}\r\n        </ol>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Leaderboard;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./homepage.css\"\r\n\r\nclass Homepage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      redirect: null,\r\n      numPlayers: 0,\r\n      numProperties: 0,\r\n      totalEarnings: 0,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // Call the backend to get user account information\r\n    const res = await axios({\r\n        method: \"get\",\r\n        url: \"https://backend-426.herokuapp.com/api/stats\",\r\n    });\r\n    if (res.status !== 200) {\r\n        return;\r\n    }\r\n\r\n    this.setState(() => ({\r\n        numPlayers: res.data.numUsers,\r\n        numProperties: res.data.numProperties,\r\n        totalEarnings: res.data.totalEarnings,\r\n    }));\r\n  }\r\n\r\n  // Helper for turning big int into dollar readable format\r\n  numberWithCommas(x) {\r\n    if (!x) {\r\n      return \"\";\r\n    }\r\n    x = parseFloat(x.toFixed(2));\r\n    return \"$\" + x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return this.state.redirect;\r\n    }\r\n    return (\r\n      <div className=\"home im\">\r\n        <h1 className=\"display-3 font\">Earth 3.0</h1>\r\n        <div>\r\n          <h3 className=\"font\">Scroll Down to See How to Play</h3>\r\n        </div>\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-dark btn-rounded loginregister\"\r\n          data-mdb-ripple-color=\"dark\"\r\n          onClick={() => {\r\n            this.setState(() => ({\r\n              redirect: (\r\n                <Redirect to=\"/Earth3-Frontend/login\"></Redirect>\r\n              ),\r\n            }));\r\n          }}\r\n        >\r\n          Login\r\n                </button>\r\n\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-dark btn-rounded loginregister\"\r\n          data-mdb-ripple-color=\"dark\"\r\n          onClick={() => {\r\n            this.setState(() => ({\r\n              redirect: (\r\n                <Redirect to=\"/Earth3-Frontend/register\"></Redirect>\r\n              ),\r\n            }));\r\n          }}\r\n        >\r\n          Register\r\n                </button>\r\n        <div className=\"bottom\">\r\n          <h3>Active Players: {this.state.numPlayers}</h3>\r\n          <h3>Total Properties: {this.state.numProperties}</h3>\r\n          <h3>Total Revenue Generated: {this.numberWithCommas(this.state.totalEarnings)}</h3>\r\n        </div>\r\n        <div className=\"htpt pad\">\r\n          <h1>How it works:</h1>\r\n          <p>\tYou are a real player on a map and you have a balance</p>\r\n          <p>When you create an account, your player starts in Chapel Hill, NC.</p>\r\n          <p>You can walk around by clicking on the map walking on the map costs money.</p>\r\n          <p>You can see all the properties that are within 500 meters of you Each property has 5 tiers</p>\r\n          <p>Each tier costs propertyValue^tier</p>\r\n          <p>Each tier earns you baseIncome^tier</p>\r\n          <p>Your properties pay out every minute, your balance is automatically changed.</p>\r\n          <p>\tBy default you can only own 5 total properties (any number of tiers in a property is not limited)</p>\r\n          <p>You can increase the amount of properties you may have on the account view page</p>\r\n          <p>Cost of additional property spaces: (current maximum number of properties)  ^ 3 </p>\r\n          <p>You can also increase your per minute payout by upgrading your multiplier</p>\r\n          <p>Each 1,000,000 spent on increasing multiplier will increase per minute payout by 1%</p>\r\n          <p>Cost for multiplier is constant (1M = 1%) and doesn't increase.</p>\r\n          <p>User can sell properties if constrained by their current maximum property limit</p>\r\n          <p>User will not earn money for selling properties, they simply lose ownership There are over 10,000 properties.</p>\r\n          <p>We have added a property corresponding to every major American city</p>\r\n          <p>We have also added properties corresponding to many buildings on UNC's campus </p>\r\n          <h1>Additional Information:</h1>\r\n          <p>We used:</p>\r\n          <p>\tHeroku : Hosting backend</p>\r\n          <p>Github Pages: Hosting Frontend</p>\r\n          <p>\tNode.JS + Express.JS + Mongoose: Implementing Backend</p>\r\n          <p>\tMongoDB: Storing Backend Information</p>\r\n          <p>\tReact + Axios + Google Maps API: Implementing Frontend</p>\r\n          <p>Bootstrap and CSS: General Styling</p>\r\n          <p>https://opencagedata.com: Decoding Coordinates to Addresses</p>\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nexport default Homepage;\r\n","// React Imports\r\nimport React from \"react\"; \r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\n// Component Imports\r\nimport Register from \"./components/Register\";\r\nimport Login from \"./components/Login\";\r\nimport AccountInfoView from \"./components/AccountInfoView\";\r\nimport Dashboard from \"./components/Dashboard\";\r\nimport Leaderboard from \"./components/Leaderboard\";\r\nimport Homepage from \"./components/Homepage\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n//import Jumbotron from 'react-bootstrap/Jumbotron'\r\n\r\n\r\nfunction App() {\r\n    return (\r\n      <Switch>\r\n        <Route exact path=\"/Earth3-Frontend/\">\r\n          <Homepage /> \r\n        </Route>\r\n        <Route path=\"/Earth3-Frontend/login\">\r\n          <Login />\r\n        </Route>\r\n        <Route path=\"/Earth3-Frontend/register\">\r\n          <Register />\r\n        </Route>\r\n        <Route path=\"/Earth3-Frontend/personal\">\r\n          <AccountInfoView />\r\n        </Route>\r\n        <Route path=\"/Earth3-Frontend/dashboard\">\r\n          <Dashboard />\r\n        </Route>\r\n        <Route path=\"/Earth3-Frontend/leaderboard\">\r\n          <Leaderboard />\r\n        </Route>\r\n      </Switch>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}